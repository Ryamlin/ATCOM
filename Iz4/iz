import cv2
import numpy as np
import tensorflow as tf
import tensorflow_hub as hub
# 1 метод
face_cascade = cv2.CascadeClassifier(r'C:\Users\Rumlin\PycharmProjects\pythonProject\haarcascade_frontalface_default.xml')

# Открытие видеопотока с камеры (0 - это  номер камеры)
cap = cv2.VideoCapture(0)

while True:
    # Чтение кадра из видеопотока
    ret, frame = cap.read()

    if not ret:
        break

    # Преобразование изображения в оттенки серого
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Обнаружение лиц на изображении
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    # Рисование прямоугольников вокруг обнаруженных лиц
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

    # Отображение результатов
    cv2.imshow('Face Detection', frame)

    # Выход из цикла при нажатии 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Освобождение ресурсов и закрытие окон
cap.release()
cv2.destroyAllWindows()

# 2 метод
#model_url = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'

# Load the model
#model = hub.KerasLayer(model_url, input_shape=(224,  224,  3))
# Загрузка предобученной модели SSD
#net = cv2.dnn.readNetFromTensorflow('model')

# Открытие видеопотока с камеры
#cap = cv2.VideoCapture(0)

#while True:
    # Чтение кадра из видеопотока
    #ret, frame = cap.read()

    #if not ret:
    #    break

    # Подготовка входных данных для модели
   # blob = cv2.dnn.blobFromImage(frame, size=(300, 300), swapRB=True, crop=False)

    # Передача входных данных в модель
    #net.setInput(blob)
    #output = net.forward()

    # Обработка результатов детекции
    #for detection in output[0, 0, :, :]:
        #confidence = float(detection[2])
        #if confidence > 0.5:
           # left = int(detection[3] * frame.shape[1])
            #top = int(detection[4] * frame.shape[0])
            #right = int(detection[5] * frame.shape[1])
            #bottom = int(detection[6] * frame.shape[0])
            #cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), thickness=2)

    # Отображение результатов
    #cv2.imshow('SSD Object Detection', frame)

    # Выход из цикла при нажатии 'q'
   # if cv2.waitKey(1) & 0xFF == ord('q'):
       # break

# Освобождение ресурсов и закрытие окон
#cap.release()
#cv2.destroyAllWindows()

# Загрузка готового классификатора для лиц
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Открытие видеопотока с камеры
cap = cv2.VideoCapture(0)

while True:
    # Чтение кадра из видеопотока
    ret, frame = cap.read()

    if not ret:
        break

    # Преобразование изображения в оттенки серого
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Обнаружение лиц на изображении
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5)

    # Рисование прямоугольников вокруг обнаруженных лиц
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 255, 100), 2)

    # Отображение результатов
    cv2.imshow('Face Detection', frame)

    # Выход из цикла при нажатии 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Освобождение ресурсов и закрытие окон
cap.release()
cv2.destroyAllWindows()

